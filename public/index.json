
[{"content":"In this analysis, I will walk through the process of identifying and understanding the behavior of the Amadey Trojan Stealer by examining a Windows memory dump. The analysis will cover identifying the malicious processes, locating malware, and tracing its communication with external servers\nScenario #\rAn after-hours alert from the Endpoint Detection and Response (EDR) system flags suspicious activity on a Windows workstation. The flagged malware aligns with the Amadey Trojan Stealer. Your job is to analyze the presented memory dump and create a detailed report for actions taken by the malware.\nSolution #\rIn the memory dump analysis, determining the root of the malicious activity is essential for comprehending the extent of the intrusion. What is the name of the parent process that triggered this malicious behavior? First, I used windows.pslist and windows.pstree to list all processes and to visualize the parent-child process relationships:\nvol.py -f ../../Artifacts/Windows\\ 7\\ x64-Snapshot4.vmem windows.pslist # all processes vol.py -f ../../Artifacts/Windows\\ 7\\ x64-Snapshot4.vmem windows.pstree # parent child processes relations I found lssass.exe to be associated with the suspicious parent process rundll32.exe, indicating this as the root of the malicious behavior..\nlssass.exe\n2.Once the rogue process is identified, its exact location on the device can reveal more about its nature and source. Where is this process housed on the workstation?\nNext, I used windows.filescan to find the location of the malware:\n/vol.py -f ../../Artifacts/Windows\\ 7\\ x64-Snapshot4.vmem windows.filescan | grep \u0026#34;lssass.exe\u0026#34; C:\\Users\\0XSH3R~1\\AppData\\Local\\Temp\\925e7e99c5\\lssass.exe\nPersistent external communications suggest the malware’s attempts to reach out C2C server. Can you identify the Command and Control (C2C) server IP that the process interacts with? So, i used windows.netscan\nvol.py -f ../../Artifacts/Windows\\ 7\\ x64-Snapshot4.vmem windows.netscan | grep \u0026#34;lssass.exe\u0026#34; 41.75.84.12\nFollowing the malware link with the C2C, the malware is likely fetching additional tools or modules. How many distinct files is it trying to bring onto the compromised workstation? I tried to dump malicious Process:\nvol.py -f ../../Artifacts/Windows\\ 7\\ x64-Snapshot4.vmem windows.memmap.Memmap --pid 2748 --dump So after dumping the process i used strings command to extract HTTP GET Requests:\nstrings pid.2748.dmp | grep -A 5 -i \u0026#34;^get /\u0026#34; The answer is: 2\nIdentifying the storage points of these additional components is critical for containment and cleanup. What is the full path of the file downloaded and used by the malware in its malicious activity? From Q4 we known that the attacker downloaded another 2 malicious files named :\ncred64.dll clip64.dll I used windows.filescan to find the location of the second malware:\n/vol.py -f ../../Artifacts/Windows\\ 7\\ x64-Snapshot4.vmem windows.filescan | grep \u0026#34;clip64.dll\u0026#34; c:\\Users\\0xSh3rl0ck\\AppData\\Roaming\\116711e5a2ab05\\clip64.dll\nOnce retrieved, the malware aims to activate its additional components. Which child process is initiated by the malware to execute these files? From question n°5:\nRUNDLL32.EXE\n7.Understanding the full range of Amadey’s persistence mechanisms can help in an effective mitigation. Apart from the locations already spotlighted, where else might the malware be ensuring its consistent presence?\nvol.py -f ../../Artifacts/Windows\\ 7\\ x64-Snapshot4.vmem windows.filescan | grep \u0026#34;lssass.exe\u0026#34; c:\\Windows\\System32\\Tasks\\lssass.exe\n~ Carbo\n","date":"7 September 2025","externalUrl":null,"permalink":"/posts/amadayelab-cyberdefenders/","section":"Posts \u0026 Writeups","summary":"","title":"Amadey Lab - Cyberdefenders","type":"posts"},{"content":"\rScenario #\rIn 2025, a new bakery chain called VeryCheap has taken Denmark by storm, selling their brunsviger at suspiciously low prices and driving independent bakeries out of business. But behind the sugary facade, something doesn\u0026rsquo;t add up. They must be losing money with such low prices - and why are so many of their customers in suits?\nA recent police raid seized one of their office PCs. Your task: perform a full forensic analysis of the disk and find what VeryCheap is really hiding!\nSolution #\rIn this challenge we have a disk image, and as the description hints, our task was to analyze it thoroughly and uncover what VeryCheap was really hiding.\nI used Autopsy to open the disk file.\nStored Files #\rI found this information:\nDocuments: A few brunner recipes and a test.hc file - the default extension for VeraCrypt containers Downloads: Installers for 7-Zip, Google Chrome, and LibreOffice Pictures: A few downloaded brunsviger images from the internet with Zone.Identifier files (Mark Of The Web). Also a seemingly generated image of a VeryCheap bakery, VeryCheapBrunner.png. In addition, there are deleted files. The recycle bin has a few files that also point to the original locations. With most forensic tools, the files and their content can also be seen when navigating to their original location, just marked deleted:\nC:\\Users\\Joe\\Downloads\\VeraCrypt Setup 1.26.24.exe C:\\Users\\Joe\\Desktop\\test_container_password.txt Password for my test container is \u0026#34;brunsviger\u0026#34;. ------------------------------METADATA------------------------------ Explanation #\rThe next step was to download VeraCrypt and attempt to open the previously discovered container file, test.hc, using the recovered password. With \u0026ldquo;brunsviger\u0026rdquo; as the password, I successfully mounted the volume and accessed its contents. Inside, I found a text file, which, unfortunately, turned out to be a decoy rather than the actual secret.\nNot discouraged, I continued investigating and recalled that VeraCrypt can also be used via the command line. This prompted me to examine the PowerShell history for any potentially useful commands.\nI checked the following path: C:\\Users\\Joe\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt\nAfter extracting the necessary files from the disk, I returned to VeraCrypt and used the recovered password and keyfile to mount the hidden container. Inside, I found four files, but the one that stood out — and ultimately proved useful — was VeryCheapVerySecretRecipe.txt.\nFrom the text file, we obtained two key hints. The first — “that’s why I keep so many sticky notes around” — pointed us toward examining Sticky Notes artifacts on the disk. The second — “some castles might have a back entrance with a different key” — hinted that the same VeraCrypt container could potentially be unlocked again using a different password stored elsewhere.\nFollowing this lead, I navigated to the Sticky Notes storage location at: C:\\Users\\Joe\\AppData\\Local\\Packages\\Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe\\LocalState\\plum.sqlite.\nWhen I opened the file, I found another useful hint hidden within the notes that could lead to more information about the encrypted container.\nOne line stood out: “Never save anything sensitive as a file on disk, just keep it in an unsaved Notepad window.” This pointed us directly toward investigating Notepad’s unsaved or recovery data, as Notepad automatically stores unsaved content for recovery when reopened.\nFollowing this clue, I navigated to the Notepad recovery data location: C:\\Users\\Joe\\AppData\\Local\\Packages\\Microsoft.WindowsNotepad_8wekyb3d8bbwe.\nWhile examining the Notepad artifact, I came across a clue referencing VeraCrypt’s Hidden Volume feature. For context, a hidden volume is essentially a secret container embedded within a standard VeraCrypt volume. Both share the same file, but entering one password unlocks the decoy outer volume, while a different password reveals the hidden inner volume. This design supports plausible deniability — allowing a user to disclose the outer password without exposing the existence of the hidden data.\nAt the end of the Notepad file, I found the line: WhaaaatItCanHaveAnExtraHiddenVolume?!?\nThis was clearly intended as the password for the hidden volume.\nWith this new password, I was able to unlock the hidden container. Inside, I found an Excel file — and that’s where the real flag was stored.\n","date":"24 August 2025","externalUrl":null,"permalink":"/posts/brunner-ctf/","section":"Posts \u0026 Writeups","summary":"","title":"Very Cheap - BrunnerCTF 2025","type":"posts"},{"content":"","date":"7 September 2025","externalUrl":null,"permalink":"/","section":"Carbo's Blog","summary":"","title":"Carbo's Blog","type":"page"},{"content":"","date":"7 September 2025","externalUrl":null,"permalink":"/tags/cyberdefenders/","section":"Tags","summary":"","title":"Cyberdefenders","type":"tags"},{"content":"","date":"7 September 2025","externalUrl":null,"permalink":"/tags/forensics/","section":"Tags","summary":"","title":"Forensics","type":"tags"},{"content":"","date":"7 September 2025","externalUrl":null,"permalink":"/tags/memory-dump/","section":"Tags","summary":"","title":"Memory-Dump","type":"tags"},{"content":" ","date":"7 September 2025","externalUrl":null,"permalink":"/posts/","section":"Posts \u0026 Writeups","summary":"","title":"Posts \u0026 Writeups","type":"posts"},{"content":"","date":"7 September 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"7 September 2025","externalUrl":null,"permalink":"/tags/volatility3/","section":"Tags","summary":"","title":"Volatility3","type":"tags"},{"content":"","date":"24 August 2025","externalUrl":null,"permalink":"/tags/autopsy/","section":"Tags","summary":"","title":"Autopsy","type":"tags"},{"content":"","date":"24 August 2025","externalUrl":null,"permalink":"/tags/brunnerctf/","section":"Tags","summary":"","title":"Brunnerctf","type":"tags"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]